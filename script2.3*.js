// Задаем функцию пузырьковой сортировки
function bubbleSortDescending(arr) {
    let n = arr.length;  // Получаем длину массива
  
    // Внешний цикл
    // Контролирует количество проходов по массиву. 
    // Он выполняет обход массива несколько раз, каждый раз уменьшив количество элементов для проверки, 
    // так как после каждого прохода наименьший элемент "всплывает" в конец массива.
    // Мы выполняем n - 1 проходов, так как после каждого прохода наименьший элемент оказывается в конце массива и больше не нуждается в проверке.
    
    for (
        //Инициализация переменной i, которая будет отслеживать количество выполненных проходов. Начинаем с 0, так как первый проход — это 0-й.
        let i = 0; 
        // Цикл будет выполняться до тех пор, пока i не станет равным n - 1. 
        // Почему n - 1? На каждом проходе внутренний цикл двигает наименьший элемент в конец массива. 
        // После каждого прохода самый маленький элемент оказывается на своем месте, и больше не требует проверки.
        // После n - 1 прохода весь массив будет отсортирован, и не будет необходимости в дополнительных проверках, 
        // так как самый маленький элемент будет уже в конце.
        i < n - 1; 
        // После каждого прохода значение i увеличивается на 1, что позволяет переходить к следующему проходу.
        i++) 
        {
        // Выводим состояние массива перед каждой итерацией внешнего цикла
        console.log(`Итерация ${i + 1}: Массив перед итерацией: `, arr);
      
            // Внутренний цикл 
            // Перебирает элементы массива, чтобы сравнивать их попарно.
            // Сравнивает соседние элементы массива.
            for (
                // Инициализация переменной j, которая будет отслеживать текущий элемент для сравнения. 
                // Цикл начинается с 0, так как мы начинаем проверку с первого элемента в массиве:
                let j = 0; 
                // Следующее условие говорит о том, что цикл будет выполняться, пока j не станет равным n - 1 - i. Почему так?
                // n — это длина массива, то есть количество элементов.
                // i — это переменная внешнего цикла, которая отслеживает количество выполненных проходов.
                // После каждого прохода внешнего цикла самый маленький элемент оказывается в конце массива, 
                // он больше не нуждается в проверке. 
                // Поэтому количество элементов для проверки уменьшается на 1 с каждым проходом внешнего цикла.
                // Таким образом, после первого прохода внутренний цикл будет сравнивать все элементы до предпоследнего, 
                // после второго прохода — до элемента с индексом n-2, и так далее:
                j < n - 1 - i; 
                // После каждой итерации внутреннего цикла переменная j увеличивается на 1,
                // что означает переход к следующему элементу массива для сравнения:
                j++) 
                
                {
                // Выводим индексы и значения элементов, которые будем сравнивать на текущей итерации
                console.log(`Сравниваем индексы ${j} и ${j + 1}: ${arr[j]} и ${arr[j + 1]}`);
        
                    // Если текущий элемент меньше следующего, меняем их местами
                    if (arr[j] < arr[j + 1]) {
                    // Если элементы нужно поменять местами, выводим это в консоль
                    console.log(`Меняем местами: ${arr[j]} и ${arr[j + 1]}`);
          
                    // Выполняем обмен местами с использованием временной переменной
                    let temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                    }
                }
  
        // После каждого прохода внутреннего цикла выводим состояние массива
        console.log(`Массив после итерации ${i + 1}: `, arr);
        }
  
    return arr;  // Возвращаем отсортированный массив
  }
  
  // Пример массива с рейтингами студентов, значения от 0 до 4500
  let ratings = [
    700, 2100, 4000, 1500, 2700, 3700, 4200, 3200, 1000, 30,
    2800, 1600, 4500, 1100, 0, 3000, 2000, 3500, 900, 1900,
    2300, 4100, 1800, 2200, 150
  ];
  
  // Запускаем пузырьковую сортировку
  console.log("Начальная сортировка:");
  let sortedRatings = bubbleSortDescending(ratings);
  
  // Выводим отсортированный массив
  console.log("Итоговый отсортированный массив:", sortedRatings);
  